# import automate web browser interaction library
from selenium import webdriver
from selenium.webdriver.common.by import By
import time
import warnings
import openai

# ignore any warnings generated by the code
warnings.filterwarnings("ignore")


# define a function to get data from Google based on the user's question
def scraping_data(question):
  # set the browser options to run the browser in headless mode
  options = webdriver.ChromeOptions()
  options.headless = True
  options.add_argument('--no-sandbox')
  options.add_argument('--disable-dev-shm-usage')

  # create the search URL based on the user question
  url = "https://www.google.com/search?q=" + question

  # create a new instance of the Chrome browser with the defined options
  browser = webdriver.Chrome(options=options)
  browser.get(url)

  # scroll to the bottom of the page to load all the content
  browser.execute_script("window.scrollTo(0, document.body.scrollHeight)")

  # wait for 3 seconds to let the content load
  time.sleep(3)

  # create an empty list to store the data from Google search result
  data = []

  # find the content of the search result and store it in the list
  content = browser.find_elements(By.CLASS_NAME,
                                  'VwiC3b.yXK7lf.MUxGbd.yDYNvb.lyLwlc.lEBKkf')
  for elements in content:
    data.append(elements.text)

  # close the browser and return the search data list
  browser.quit()
  return data
  
# example usage of the function
# print the result of scraping the data for the question "Which team won the 2022 World Cup?"
# uncomment the line below to run the code
# print(scraping_data("Which team won the 2022 World Cup?"))

  
# set the OpenAI API key.
# PLEASE DO NOT SHARE THE API KEY
openai.api_key = "################################"

# define a function to get an answer from the OpenAI GPT-3.5 model
def get_answer(data):
    # call the OpenAI Chat Completion API with the given prompt data
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": "\n".join(data)}]
    )
    # extract the response message from the API response
    return response.choices[0].message.content

# define a function to ask a question and get an answer from the OpenAI GPT-3.5 model
def ask_question():
    # set a flag to control the while loop
    flag = True
    # print a greeting message
    greeting = "\033[1;31mChatGPT: Hi I am ChatGpt. I could help answer your question. If you wish to quit, please type: quit\033[0m"
    print(greeting)
    print()
    # start a while loop to keep asking questions until the user quits
    while flag:
        # get input from the user
        question = input()
        # check if the user wants to quit
        if question != 'quit':
            # scrape data from Google based on the user question
            data = scraping_data(question)
            # add the user question to the data list
            data.append(question)
            # get an answer from the OpenAI GPT-3.5 model based on the data
            answer = get_answer(data)
            # print the answer
            print(f"\033[1;31mChatGPT: {answer}\033[0m")
            print()
        else:
            # set the flag to False to exit the while loop
            flag = False
            print()
            # print a goodbye message
            print("\033[1;31mChatGPT: See you next time, bye!\033[0m")

# call the ask_question() function to start the chatbot
ask_question()

# code written by Letian Yang (Michael)
